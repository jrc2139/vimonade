// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vimonade.proto

package vimonade

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SendFileRequest struct {
	// Types that are valid to be assigned to Data:
	//	*SendFileRequest_Info
	//	*SendFileRequest_ChunkData
	Data                 isSendFileRequest_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SendFileRequest) Reset()         { *m = SendFileRequest{} }
func (m *SendFileRequest) String() string { return proto.CompactTextString(m) }
func (*SendFileRequest) ProtoMessage()    {}
func (*SendFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d1d9016bdda1f4a, []int{0}
}

func (m *SendFileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendFileRequest.Unmarshal(m, b)
}
func (m *SendFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendFileRequest.Marshal(b, m, deterministic)
}
func (m *SendFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendFileRequest.Merge(m, src)
}
func (m *SendFileRequest) XXX_Size() int {
	return xxx_messageInfo_SendFileRequest.Size(m)
}
func (m *SendFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendFileRequest proto.InternalMessageInfo

type isSendFileRequest_Data interface {
	isSendFileRequest_Data()
}

type SendFileRequest_Info struct {
	Info *FileInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type SendFileRequest_ChunkData struct {
	ChunkData []byte `protobuf:"bytes,2,opt,name=chunk_data,json=chunkData,proto3,oneof"`
}

func (*SendFileRequest_Info) isSendFileRequest_Data() {}

func (*SendFileRequest_ChunkData) isSendFileRequest_Data() {}

func (m *SendFileRequest) GetData() isSendFileRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SendFileRequest) GetInfo() *FileInfo {
	if x, ok := m.GetData().(*SendFileRequest_Info); ok {
		return x.Info
	}
	return nil
}

func (m *SendFileRequest) GetChunkData() []byte {
	if x, ok := m.GetData().(*SendFileRequest_ChunkData); ok {
		return x.ChunkData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SendFileRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SendFileRequest_Info)(nil),
		(*SendFileRequest_ChunkData)(nil),
	}
}

type SendFileResponse struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size                 uint32   `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendFileResponse) Reset()         { *m = SendFileResponse{} }
func (m *SendFileResponse) String() string { return proto.CompactTextString(m) }
func (*SendFileResponse) ProtoMessage()    {}
func (*SendFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d1d9016bdda1f4a, []int{1}
}

func (m *SendFileResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendFileResponse.Unmarshal(m, b)
}
func (m *SendFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendFileResponse.Marshal(b, m, deterministic)
}
func (m *SendFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendFileResponse.Merge(m, src)
}
func (m *SendFileResponse) XXX_Size() int {
	return xxx_messageInfo_SendFileResponse.Size(m)
}
func (m *SendFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendFileResponse proto.InternalMessageInfo

func (m *SendFileResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SendFileResponse) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type FileInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FileType             string   `protobuf:"bytes,2,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileInfo) Reset()         { *m = FileInfo{} }
func (m *FileInfo) String() string { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()    {}
func (*FileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d1d9016bdda1f4a, []int{2}
}

func (m *FileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileInfo.Unmarshal(m, b)
}
func (m *FileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileInfo.Marshal(b, m, deterministic)
}
func (m *FileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileInfo.Merge(m, src)
}
func (m *FileInfo) XXX_Size() int {
	return xxx_messageInfo_FileInfo.Size(m)
}
func (m *FileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FileInfo proto.InternalMessageInfo

func (m *FileInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileInfo) GetFileType() string {
	if m != nil {
		return m.FileType
	}
	return ""
}

func init() {
	proto.RegisterType((*SendFileRequest)(nil), "vimonade.SendFileRequest")
	proto.RegisterType((*SendFileResponse)(nil), "vimonade.SendFileResponse")
	proto.RegisterType((*FileInfo)(nil), "vimonade.FileInfo")
}

func init() {
	proto.RegisterFile("vimonade.proto", fileDescriptor_4d1d9016bdda1f4a)
}

var fileDescriptor_4d1d9016bdda1f4a = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x13, 0x89, 0xa5, 0x19, 0xff, 0x54, 0xf6, 0x20, 0x35, 0x15, 0x2d, 0x39, 0xe5, 0x94,
	0x42, 0xbd, 0x29, 0x08, 0xfe, 0xa9, 0xd4, 0x9b, 0xa4, 0xd2, 0x6b, 0xd9, 0x36, 0x93, 0xba, 0x98,
	0xee, 0xae, 0xd9, 0x4d, 0x25, 0x7e, 0x55, 0xbf, 0x8c, 0xec, 0xc6, 0x5a, 0xa8, 0x45, 0x6f, 0x93,
	0xf7, 0x66, 0xde, 0x0b, 0xbf, 0x85, 0xc3, 0x25, 0x5b, 0x08, 0x4e, 0x53, 0x8c, 0x65, 0x21, 0xb4,
	0x20, 0xcd, 0xd5, 0x77, 0xd0, 0x99, 0x0b, 0x31, 0xcf, 0xb1, 0x67, 0xf5, 0x69, 0x99, 0xf5, 0x70,
	0x21, 0x75, 0x55, 0xaf, 0x05, 0x67, 0x9b, 0xe6, 0x7b, 0x41, 0xa5, 0xc4, 0x42, 0xd5, 0x7e, 0x98,
	0x42, 0x6b, 0x84, 0x3c, 0x7d, 0x60, 0x39, 0x26, 0xf8, 0x56, 0xa2, 0xd2, 0x24, 0x02, 0x8f, 0xf1,
	0x4c, 0xb4, 0xdd, 0xae, 0x1b, 0xed, 0xf5, 0x49, 0xfc, 0x53, 0x6c, 0x96, 0x1e, 0x79, 0x26, 0x86,
	0x4e, 0x62, 0x37, 0xc8, 0x39, 0xc0, 0xec, 0xa5, 0xe4, 0xaf, 0x93, 0x94, 0x6a, 0xda, 0xde, 0xe9,
	0xba, 0xd1, 0xfe, 0xd0, 0x49, 0x7c, 0xab, 0xdd, 0x53, 0x4d, 0x6f, 0x1b, 0xe0, 0x19, 0x2b, 0xbc,
	0x84, 0xa3, 0x75, 0x8b, 0x92, 0x82, 0x2b, 0x24, 0x04, 0x3c, 0x4e, 0x17, 0x68, 0x6b, 0xfc, 0xc4,
	0xce, 0x46, 0x53, 0xec, 0x03, 0x6d, 0xd4, 0x41, 0x62, 0xe7, 0xf0, 0x0a, 0x9a, 0xab, 0xe2, 0xad,
	0x37, 0x1d, 0xf0, 0x33, 0x96, 0xe3, 0x44, 0x57, 0xb2, 0x3e, 0xf4, 0x93, 0xa6, 0x11, 0x9e, 0x2b,
	0x89, 0xfd, 0x4f, 0x17, 0x5a, 0xe3, 0xef, 0xff, 0x1f, 0x61, 0xb1, 0x64, 0x33, 0x24, 0xd7, 0xe0,
	0xdd, 0x09, 0x59, 0x91, 0xd3, 0xb8, 0x66, 0x13, 0xaf, 0xd8, 0xc4, 0x23, 0x5d, 0x30, 0x3e, 0x1f,
	0xd3, 0xbc, 0xc4, 0xe0, 0xf8, 0x97, 0x3b, 0x30, 0x58, 0x43, 0x87, 0x0c, 0x60, 0xf7, 0x89, 0x2a,
	0x8d, 0xff, 0x04, 0xfc, 0xe9, 0x86, 0x0e, 0xb9, 0x01, 0xcf, 0x30, 0x21, 0x27, 0x6b, 0xc0, 0x1b,
	0x2f, 0x11, 0x04, 0xdb, 0xac, 0x1a, 0x5f, 0xe8, 0x44, 0xee, 0xb4, 0x61, 0xa3, 0x2f, 0xbe, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xb9, 0xb2, 0x1d, 0x1c, 0x1c, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VimonadeServiceClient is the client API for VimonadeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VimonadeServiceClient interface {
	Copy(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*empty.Empty, error)
	Paste(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*wrappers.StringValue, error)
	Send(ctx context.Context, opts ...grpc.CallOption) (VimonadeService_SendClient, error)
}

type vimonadeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVimonadeServiceClient(cc grpc.ClientConnInterface) VimonadeServiceClient {
	return &vimonadeServiceClient{cc}
}

func (c *vimonadeServiceClient) Copy(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/vimonade.VimonadeService/Copy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vimonadeServiceClient) Paste(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, "/vimonade.VimonadeService/Paste", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vimonadeServiceClient) Send(ctx context.Context, opts ...grpc.CallOption) (VimonadeService_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VimonadeService_serviceDesc.Streams[0], "/vimonade.VimonadeService/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &vimonadeServiceSendClient{stream}
	return x, nil
}

type VimonadeService_SendClient interface {
	Send(*SendFileRequest) error
	CloseAndRecv() (*SendFileResponse, error)
	grpc.ClientStream
}

type vimonadeServiceSendClient struct {
	grpc.ClientStream
}

func (x *vimonadeServiceSendClient) Send(m *SendFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vimonadeServiceSendClient) CloseAndRecv() (*SendFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VimonadeServiceServer is the server API for VimonadeService service.
type VimonadeServiceServer interface {
	Copy(context.Context, *wrappers.StringValue) (*empty.Empty, error)
	Paste(context.Context, *wrappers.StringValue) (*wrappers.StringValue, error)
	Send(VimonadeService_SendServer) error
}

// UnimplementedVimonadeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVimonadeServiceServer struct {
}

func (*UnimplementedVimonadeServiceServer) Copy(ctx context.Context, req *wrappers.StringValue) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Copy not implemented")
}
func (*UnimplementedVimonadeServiceServer) Paste(ctx context.Context, req *wrappers.StringValue) (*wrappers.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paste not implemented")
}
func (*UnimplementedVimonadeServiceServer) Send(srv VimonadeService_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}

func RegisterVimonadeServiceServer(s *grpc.Server, srv VimonadeServiceServer) {
	s.RegisterService(&_VimonadeService_serviceDesc, srv)
}

func _VimonadeService_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VimonadeServiceServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vimonade.VimonadeService/Copy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VimonadeServiceServer).Copy(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _VimonadeService_Paste_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VimonadeServiceServer).Paste(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vimonade.VimonadeService/Paste",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VimonadeServiceServer).Paste(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _VimonadeService_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VimonadeServiceServer).Send(&vimonadeServiceSendServer{stream})
}

type VimonadeService_SendServer interface {
	SendAndClose(*SendFileResponse) error
	Recv() (*SendFileRequest, error)
	grpc.ServerStream
}

type vimonadeServiceSendServer struct {
	grpc.ServerStream
}

func (x *vimonadeServiceSendServer) SendAndClose(m *SendFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vimonadeServiceSendServer) Recv() (*SendFileRequest, error) {
	m := new(SendFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _VimonadeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vimonade.VimonadeService",
	HandlerType: (*VimonadeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Copy",
			Handler:    _VimonadeService_Copy_Handler,
		},
		{
			MethodName: "Paste",
			Handler:    _VimonadeService_Paste_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _VimonadeService_Send_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "vimonade.proto",
}
